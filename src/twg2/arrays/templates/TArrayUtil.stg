TArrayUtil(var) ::= <<
package $var.packageName$;

import java.util.Arrays;
import java.lang.reflect.Array;
import java.util.function.Function;

/** Methods for finding the index of a value in an array of values, concat arrays
 * together, reverse an array of values, and calculate the sum, average,
 * minimum, or maximum of a numeric array.
 * @author TeamworkGuy2
 * @since 2014-6-2
 */
@javax.annotation.Generated("StringTemplate")
public final class $var.className$ {
	public static final byte[] EMPTY_BYTE_ARRAY = new byte[0];
	public static final short[] EMPTY_SHORT_ARRAY = new short[0];
	public static final char[] EMPTY_CHAR_ARRAY = new char[0];
	public static final int[] EMPTY_INT_ARRAY = new int[0];
	public static final long[] EMPTY_LONG_ARRAY = new long[0];
	public static final float[] EMPTY_FLOAT_ARRAY = new float[0];
	public static final double[] EMPTY_DOUBLE_ARRAY = new double[0];
	public static final String[] EMPTY_STRING_ARRAY = new String[0];
	public static final Object[] EMPTY_OBJECT_ARRAY = new Object[0];


	private $var.className$() { throw new AssertionError("cannot instantiate static class $var.className$"); }


$var.types:{ary | 	// start $ary.type$ array methods
	/** Convert a set of $ary.type$ values to an array
	 * @param values the set of values
	 * @return the array of values
	 */
$if(ary.isGeneric)$	@SafeVarargs
$endif$	public static final $if(ary.isGeneric)$$ary.genericSignature$ $endif$$ary.type$[] asArray($ary.type$... values) {
		return values;
	\}


	/** Search for a matching $ary.type$ in an array of $ary.type$s
	 * @param ary the array of values to search
	 * @param value the value to search for
	 * @return the index of the matching value, or -1 if the {@code value\} could not be found
	 */
	public static final $if(ary.isGeneric)$$ary.genericSignature$ $endif$int indexOf($ary.type$[] ary, $ary.type$ value) {
		return indexOf(ary, 0, ary.length, value);
	\}


	/** Search for a matching $ary.type$ in an array of $ary.type$s
	 * @param ary the array of values to search
	 * @param off the offset into {@code ary\} at which to start searching for values
	 * @param len the number of values to search for starting at {@code off\} in {@code ary\}
	 * @param value the value to search for
	 * @return the index of the matching value, or -1 if the {@code value\} could not be found
	 */
	public static final $if(ary.isGeneric)$$ary.genericSignature$ $endif$int indexOf($ary.type$[] ary, int off, int len, $ary.type$ value) {
		for(int i = off, size = off + len; i < size; i++) {
			if(ary[i]$ary.checkEquality$(value)) { return i; \}
		\}
		return -1;
	\}


$if(ary.isGeneric)$
	/** @see #indexOf(Object[], int, int, Object)
	 */
	public static final $ary.genericSignature$ int indexOfRef($ary.type$[] ary, int off, int len, $ary.type$ value) {
		for(int i = off, size = off + len; i < size; i++) {
			if(ary[i] == value) { return i; \}
		\}
		return -1;
	\}
$endif$


	/** Search for the last matching $ary.type$ in an array of $ary.type$s
	 * @param ary the array of values to search
	 * @param value the value to search for
	 * @return the index of the matching value, or -1 if the {@code value\} could not be found
	 */
	public static final $if(ary.isGeneric)$$ary.genericSignature$ $endif$int lastIndexOf($ary.type$[] ary, $ary.type$ value) {
		return lastIndexOf(ary, 0, ary.length, value);
	\}


	/** Search for the last matching $ary.type$ in an array of $ary.type$s
	 * @param ary the array of values to search
	 * @param off the offset into {@code ary\} at which to stop searching for values
	 * @param len the number of values to search for starting at {@code off + len\} in {@code ary\}
	 * @param value the value to search for
	 * @return the index of the matching value, or -1 if the {@code value\} could not be found
	 */
	public static final $if(ary.isGeneric)$$ary.genericSignature$ $endif$int lastIndexOf($ary.type$[] ary, int off, int len, $ary.type$ value) {
		for(int i = off + len - 1; i >= off; i--) {
			if(ary[i]$ary.checkEquality$(value)) { return i; \}
		\}
		return -1;
	\}


$if(ary.isGeneric)$
	/** @see #lastIndexOf(Object[], int, int, Object)
	 */
	public static final $ary.genericSignature$ int lastIndexOfRef($ary.type$[] ary, int off, int len, $ary.type$ value) {
		for(int i = off + len - 1; i >= off; i--) {
			if(ary[i] == value) { return i; \}
		\}
		return -1;
	\}
$endif$


	/** Return an array containing a copy of all of the input arrays
	 * @param arys the input arrays, cannot be null, cannot contain null
	 * @return a new array containing a shallow copy of all the input arrays
	 */
$if(ary.isGeneric)$	@SafeVarargs
$endif$
	public static final $if(ary.isGeneric)$$ary.genericSignature$ $endif$$ary.type$[] concat($ary.type$[]... arys) {
		int totalSize = 0;
		for($ary.type$[] ary : arys) {
			totalSize += ary.length;
		\}

$if(ary.isGeneric)$		@SuppressWarnings("unchecked")
$endif$		$ary.type$[] r = $if(ary.isGeneric)$($ary.type$[])$endif$new $if(ary.isGeneric)$Object$else$$ary.type$$endif$[totalSize];

		int offset = 0;
		for($ary.type$[] ary : arys) {
			System.arraycopy(ary, 0, r, offset, ary.length);
			offset += ary.length;
		\}

		return r;
	\}


	/** Return an array containing a copy of array {@code a\} and {@code b\}
	 * @param a the first array
	 * @param b the second array
	 * @return a new array containing a shallow copy of both arrays
	 */
	public static final $if(ary.isGeneric)$$ary.genericSignature$ $endif$$ary.type$[] concat($ary.type$[] a, $ary.type$[] b) {
		$ary.type$[] r = Arrays.copyOf(a, a.length + b.length);
		System.arraycopy(b, 0, r, a.length, b.length);
		return r;
	\}


	/** @see #concat($if(ary.isGeneric)$Object$else$$ary.type$$endif$[], int, int, $if(ary.isGeneric)$Object$else$$ary.type$$endif$[], int, int, int, int)
	 */
	public static final $if(ary.isGeneric)$$ary.genericSignature$ $endif$$ary.type$[] concat($ary.type$[] a, $ary.type$[] b, int dstOff, int dstTotalLength) {
		return concat(a, 0, a.length, b, 0, b.length, dstOff, dstTotalLength);
	\}


	/** Return a new array containing a copy of array {@code a\} and {@code b\}
	 * @param a the first array
	 * @param b the second array
	 * @param dstOff the offset into {@code dst\} at which to append array {@code a\} and {@code b\}
	 * @param dstTotalLength the total length of the new array to return
	 * @return a new array containing a shallow copy of both arrays
	 */
$if(ary.isGeneric)$	@SuppressWarnings("unchecked")
$endif$	public static final $if(ary.isGeneric)$$ary.genericSignature$ $endif$$ary.type$[] concat($ary.type$[] a, int offA, int lenA, $ary.type$[] b, int offB, int lenB, int dstOff, int dstTotalLength) {
		$if(ary.isGeneric)$Object$else$$ary.type$$endif$[] dst = new $if(ary.isGeneric)$Object$else$$ary.type$$endif$[dstTotalLength];
		System.arraycopy(a, offA, dst, dstOff, lenA);
		System.arraycopy(b, offB, dst, dstOff + lenA, lenB);
		return $if(ary.isGeneric)$($ary.type$[])$endif$dst;
	\}


	/** @see #concat($if(ary.isGeneric)$Object$else$$ary.type$$endif$[], int, int, $if(ary.isGeneric)$Object$else$$ary.type$$endif$[], int, int, $if(ary.isGeneric)$Object$else$$ary.type$$endif$[], int)
	 */
	public static final $if(ary.isGeneric)$$ary.genericSignature$ $endif$$ary.type$[] concat($ary.type$[] a, $ary.type$[] b, $ary.type$[] dst, int dstOff) {
		return concat(a, 0, a.length, b, 0, b.length, dst, dstOff);
	\}


	/** Return an array containing a copy of array {@code a\} and {@code b\}
	 * @param a the first array
	 * @param b the second array
	 * @param dst the destination array to store the copied elements in
	 * @param dstOff the offset into {@code dst\} at which to append array {@code a\} and {@code b\}
	 * @return a new array containing a shallow copy of both arrays
	 */
	public static final $if(ary.isGeneric)$$ary.genericSignature$ $endif$$ary.type$[] concat($ary.type$[] a, int offA, int lenA, $ary.type$[] b, int offB, int lenB, $ary.type$[] dst, int dstOff) {
		System.arraycopy(a, offA, dst, dstOff, lenA);
		System.arraycopy(b, offB, dst, dstOff + lenA, lenB);
		return dst;
	\}


	/** Create a string of values from a sub-array
	 * @param ary the array
	 * @param off the offset into {@code ary\} at which to converting elements to strings
	 * @param len the number of elements from {@code ary\} to convert to strings
	 * @return a string representation of a sub-array
	 */
	public static final $if(ary.isGeneric)$$ary.genericSignature$ $endif$String toString($ary.type$[] ary, int off, int len) {
		if(ary == null) {
			return "null";
		\}

		int maxI = len - 1;

		if(maxI < 0) {
			return "[]";
		\}

		StringBuilder strB = new StringBuilder();
		strB.append('[');
		for(int i = 0; i < maxI; i++) {
			strB.append(ary[off + i]);
			strB.append(',');
			strB.append(' ');
		\}
		strB.append(ary[off + maxI]);
		strB.append(']');
		return strB.toString();		
	\}


	/** Compare two sub-arrays for equality to one another
	 * @param a the first array to compare
	 * @param offA the offset into {@code a\} at which to start comparing
	 * @param b the second array to compare
	 * @param offB the offset into {@code b\} at which to start comparing
	 * @param len the number of elements from {@code a\} to compare to elements from {@code b\}
	 * @return true if {@code len\} number of elements from {@code a\} and {@code b\} are equal, false
	 * if one or more elements are not equal
	 */
	public static final $if(ary.isGeneric)$$ary.genericSignature$ $endif$boolean equals($ary.type$[] a, int offA, $ary.type$[] b, int offB, int len) {
		if(a == b) {
			return true;
		\}
		if(a == null || b == null) {
			return false;
		\}

		for(int i = 0; i < len; i++) {
			$ary.type$ objA = a[offA + i];
			$ary.type$ objB = b[offB + i];
			if($if(ary.isGeneric)$!(objA == $ary.defaultValue$ ? objB == $ary.defaultValue$ : objA$ary.checkEquality$(objB))$else$objA != objB$endif$) {
				return false;
			\}
		\}
		return true;		
	\}


	/** Reverse an $ary.type$ array.<br>
	 * For example {@code ary=[0, 1, 2, 3]\}, the result would be {@code ary=[3, 2, 1, 0]\}.
	 * @param ary the array to reverse a portion of
	 */
	public static final $if(ary.isGeneric)$$ary.genericSignature$ $endif$$ary.type$[] reverse($ary.type$[] ary) {
		return reverse(ary, 0, ary.length);
	\}


	/** Reverse a subset of an $ary.type$ array.<br>
	 * For example {@code ary=[0, 1, 2, 3, 4, 5]\} and {@code offset=2\} and {@code length=3\},
	 * the result would be {@code ary=[0, 1, 4, 3, 2, 5]\}.
	 * @param ary the array to reverse a portion of
	 * @param offset the offset into the array at which to begin reversing the order of elements
	 * @param length the number of elements to reverse
	 */
	public static final $if(ary.isGeneric)$$ary.genericSignature$ $endif$$ary.type$[] reverse($ary.type$[] ary, int offset, int length) {
		final int len = length/2;
		for(int i = 0; i < len; i++) {
			$ary.type$ temp = ary[offset + i];
			int i2 = offset + length - i - 1;
			ary[offset + i] = ary[i2];
			ary[i2] = temp;
		\}
		return ary;
	\}


	/** Check array not null and bounds.<br>
	 * @param ary the array to check
	 * @param off the offset being checked
	 * @param len the length being checked
	 * @return true if the bounds are valid, false if not
	 */
	public static final $if(ary.isGeneric)$$ary.genericSignature$ $endif$boolean checkBounds($ary.type$[] ary, int off, int len) {
		return ary != null && off > -1 && len > -1 && off + len <= ary.length;
	\}


	/** Check array not null and bounds.<br>
	 * @param ary the array to check
	 * @param off the offset being checked
	 * @param len the length being checked
	 * @throws ArrayIndexOutOfBoundsException if the index is out of bounds
	 * @throws NullPointerException if ary is null
	 */
	public static final $if(ary.isGeneric)$$ary.genericSignature$ $endif$void checkBoundsThrows($ary.type$[] ary, int off, int len) {
		if(ary == null) {
			throw new NullPointerException("array cannot be null");
		\}
		if(off < 0) {
			throw new ArrayIndexOutOfBoundsException("offset must be great than -1: " + off);
		\}
		if(len < 0) {
			throw new ArrayIndexOutOfBoundsException("length must be great than -1: " + len);
		\}
		if(off + len > ary.length) {
			throw new ArrayIndexOutOfBoundsException("array size=" + ary.length + ", off=" + off + ", len=" + len);
		\}
	\}
$if(!ary.isGeneric)$


	/** Alias for {@link #primitiveToWrapper($ary.type$[], int, int, $ary.objectType$[], int)\}
	 */
	public static final $if(ary.isGeneric)$$ary.genericSignature$ $endif$$ary.objectType$[] primitiveToWrapper($ary.type$[] srcAry) {
		return primitiveToWrapper(srcAry, 0, srcAry.length, new $ary.objectType$[srcAry.length], 0);
	\}


	/**
	 * @param srcAry the source primitive type array
	 * @param srcOff the source index offset at which to start copying elements
	 * @param srcLen the number of source elements to copy
	 * @param dst the destination primitive wrapper type array to store the elements in
	 * @param dstOff the offset into the destination array at which to start storing the copied elements
	 * @return the {@code dst\} array
	 */
	public static final $if(ary.isGeneric)$$ary.genericSignature$ $endif$$ary.objectType$[] primitiveToWrapper($ary.type$[] srcAry, int srcOff, int srcLen, $ary.objectType$[] dst, int dstOff) {
		for(int i = 0; i < srcLen; i++) {
			dst[dstOff + i] = srcAry[srcOff + i];
		\}
		return dst;
	\}


	/** Alias for {@link #wrapperToPrimitive($ary.objectType$[], int, int, $ary.type$[], int)\}
	 */
	public static final $if(ary.isGeneric)$$ary.genericSignature$ $endif$$ary.type$[] wrapperToPrimitive($ary.objectType$[] srcAry) {
		return wrapperToPrimitive(srcAry, 0, srcAry.length, new $ary.type$[srcAry.length], 0);
	\}


	/**
	 * @param srcAry the source primitive wrapper type array
	 * @param srcOff the source index offset at which to start copying elements
	 * @param srcLen the number of source elements to copy
	 * @param dst the destination primitive type array to store the elements in
	 * @param dstOff the offset into the destination array at which to start storing the copied elements
	 * @return the {@code dst\} array
	 */
	public static final $if(ary.isGeneric)$$ary.genericSignature$ $endif$$ary.type$[] wrapperToPrimitive($ary.objectType$[] srcAry, int srcOff, int srcLen, $ary.type$[] dst, int dstOff) {
		for(int i = 0; i < srcLen; i++) {
			dst[dstOff + i] = srcAry[srcOff + i];
		\}
		return dst;
	\}
$endif$
$if(ary.isAggregatable)$


	/** Sum of an array
	 * @param ary the array of integers to sum
	 * @return the sum of all of the elements in the specified array
	 */
	public static final $if(ary.isGeneric)$$ary.genericSignature$ $endif$$ary.sumType$ sum($ary.type$[] ary) {
		return sum(ary, 0, ary.length);
	\}


	/** Sum of the subset of an array
	 * @param ary the array of $ary.type$s to sum
	 * @param offset the offset into the array at which to start summing values
	 * @param length the number of elements to sum from the array starting
	 * at {@code offset\}
	 * @return the sum of the specified array subset
	 */
	public static final $if(ary.isGeneric)$$ary.genericSignature$ $endif$$ary.sumType$ sum($ary.type$[] ary, int offset, int length) {
		int offLen = offset + length;
		$ary.sumType$ sum = $ary.defaultValue$;
		for(int i = offset; i < offLen; i++) {
			sum += ary[i];
		\}
		return sum;
	\}


	/** The average of an array
	 * @param values the array of values to average
	 * @return the average of the array
	 */
	public static final $if(ary.isGeneric)$$ary.genericSignature$ $endif$$ary.averageType$ avg($ary.type$[] values) {
		return avg(values, 0, values.length);
	\}


	/** The average of a subset of an array
	 * @param values the array of values to average
	 * @param offset the offset into the array at which to start averaging values
	 * @param length the number of values to average from the array
	 * @return the average of the array subset specified
	 */
	public static final $if(ary.isGeneric)$$ary.genericSignature$ $endif$$ary.averageType$ avg($ary.type$[] values, int offset, int length) {
		$ary.sumType$ total = 0;
		int offLen = offset + length;
		for(int i = offset; i < offLen; i++) {
			total += values[i];
		\}
		return total/($ary.averageType$)length;
	\}


	/** Get the minimum value in an array subset
	 * @param values the array to search
	 * @return the minimum value found in the array subset specified or {@link $ary.objectType$#MAX_VALUE\} if the array is empty (0 length)
	 */
	public static final $if(ary.isGeneric)$$ary.genericSignature$ $endif$$ary.type$ min($ary.type$[] values) {
		return min(values, 0, values.length);
	\}


	/** Get the minimum value in an array subset
	 * @param values the array to search
	 * @param offset the offset into the array at which to start searching
	 * @param length the number of values to search
	 * @return the minimum value found in the array subset specified or {@link $ary.objectType$#MAX_VALUE\} if {@code length == 0\}
	 */
	public static final $if(ary.isGeneric)$$ary.genericSignature$ $endif$$ary.type$ min($ary.type$[] values, int offset, int length) {
		$ary.type$ min = $ary.maxValue$;
		int offLen = offset + length;
		for(int i = offset; i < offLen; i++) {
			if(min > values[i]) { min = values[i]; \}
		\}
		return min;
	\}


	/** Get the maximum value in an array subset
	 * @param values the array to search
	 * @return the minimum value found in the array subset specified or {@link $ary.objectType$#MIN_VALUE\} if the array is empty (0 length)
	 */
	public static final $if(ary.isGeneric)$$ary.genericSignature$ $endif$$ary.type$ max($ary.type$[] values) {
		return max(values, 0, values.length);
	\}


	/** Get the maximum value in an array subset
	 * @param values the array to search
	 * @param offset the offset into the array at which to start searching
	 * @param length the number of values to search
	 * @return the minimum value found in the array subset specified or {@link $ary.objectType$#MIN_VALUE\} if the {@code length == 0\}
	 */
	public static final $if(ary.isGeneric)$$ary.genericSignature$ $endif$$ary.type$ max($ary.type$[] values, int offset, int length) {
		$ary.type$ max = $ary.minValue$;
		int offLen = offset + length;
		for(int i = offset; i < offLen; i++) {
			if(max < values[i]) { max = values[i]; \}
		\}
		return max;
	\}
	// end $ary.type$ array methods

$else$
	// end $ary.type$ array methods
$endif$


}$
	// AND operations on primitive arrays
	/**
	 * @return a newly created array containing the ANDed results of {@code a} and {@code b}
	 * @see ArrayUtil#and(byte[], int, byte[], int, byte[], int, int) and()
	 */
	public static final byte[] and(byte[] a, byte[] b) {
		byte[] dst = new byte[a.length];
		and(a, 0, b, 0, dst, 0, dst.length);
		return dst;
	}


	/**
	 * @see ArrayUtil#and(byte[], int, byte[], int, byte[], int, int) and()
	 */
	public static final void and(byte[] a, byte[] b, byte[] dst, int length) {
		and(a, 0, b, 0, dst, 0, length);
	}


	/** AND {@code length} number of bytes from {@code a} with {@code b} using the syntax ({@code a[i] & b[i]})
	 * and store the result in {@code dst}
	 * @param a the first array
	 * @param offsetA the offset into the {@code a} array at which to start ANDing values
	 * @param b the second array
	 * @param offsetB the offset into the {@code b} array at which to start ANDing values
	 * @param dst the destination array to store the ANDed results in
	 * @param dstOffset the offset into the {@code dst} array at which to start storing the ANDed values
	 * @param length the number of values to read from {@code a} and {@code b} and store in {@code dst}
	 */
	public static final void and(byte[] a, int offsetA, byte[] b, int offsetB, byte[] dst, int dstOffset, int length) {
		for(int i = 0, aI = offsetA, bI = offsetB, dstI = dstOffset; i < length; i++, aI++, bI++, dstI++) {
			dst[dstI] = (byte)(a[aI] & b[bI]);
		}
	}
	// end AND


	// OR operations on primitive arrays
	/**
	 * @return a newly created array containing the ORed results of {@code a} and {@code b}
	 * @see ArrayUtil#or(byte[], int, byte[], int, byte[], int, int) or()
	 */
	public static final byte[] or(byte[] a, byte[] b) {
		byte[] dst = new byte[a.length];
		or(a, 0, b, 0, dst, 0, dst.length);
		return dst;
	}


	/**
	 * @see ArrayUtil#or(byte[], int, byte[], int, byte[], int, int) or()
	 */
	public static final void or(byte[] a, byte[] b, byte[] dst, int length) {
		or(a, 0, b, 0, dst, 0, length);
	}


	/** OR {@code length} number of bytes from {@code a} with {@code b} using the syntax ({@code a[i] | b[i]})
	 * and store the result in {@code dst}
	 * @param a the first array
	 * @param offsetA the offset into the {@code a} array at which to start ORing values
	 * @param b the second array
	 * @param offsetB the offset into the {@code b} array at which to start ORing values
	 * @param dst the destination array to store the ORed results in
	 * @param dstOffset the offset into the {@code dst} array at which to start storing the ORed values
	 * @param length the number of values to read from {@code a} and {@code b} and store in {@code dst}
	 */
	public static final void or(byte[] a, int offsetA, byte[] b, int offsetB, byte[] dst, int dstOffset, int length) {
		for(int i = 0, aI = offsetA, bI = offsetB, dstI = dstOffset; i < length; i++, aI++, bI++, dstI++) {
			dst[dstI] = (byte)(a[aI] | b[bI]);
		}
	}
	// end OR


	// XOR operations on primitive arrays
	/**
	 * @return a newly created array containing the XORed results of {@code a} and {@code b}
	 * @see ArrayUtil#xor(byte[], int, byte[], int, byte[], int, int) xor()
	 */
	public static final byte[] xor(byte[] a, byte[] b) {
		byte[] dst = new byte[a.length];
		xor(a, 0, b, 0, dst, 0, dst.length);
		return dst;
	}


	/**
	 * @see ArrayUtil#xor(byte[], int, byte[], int, byte[], int, int) xor()
	 */
	public static final void xor(byte[] a, byte[] b, byte[] dst, int length) {
		xor(a, 0, b, 0, dst, 0, length);
	}


	/** XOR {@code length} number of bytes from {@code a} with {@code b} using the syntax ({@code a[i] ^ b[i]})
	 * and store the result in {@code dst}
	 * @param a the first array
	 * @param offsetA the offset into the {@code a} array at which to start XORing values
	 * @param b the second array
	 * @param offsetB the offset into the {@code b} array at which to start XORing values
	 * @param dst the destination array to store the XORed results in
	 * @param dstOffset the offset into the {@code dst} array at which to start storing the XORed values
	 * @param length the number of values to read from {@code a} and {@code b} and store in {@code dst}
	 */
	public static final void xor(byte[] a, int offsetA, byte[] b, int offsetB, byte[] dst, int dstOffset, int length) {
		for(int i = 0, aI = offsetA, bI = offsetB, dstI = dstOffset; i < length; i++, aI++, bI++, dstI++) {
			dst[dstI] = (byte)(a[aI] ^ b[bI]);
		}
	}
	// end XOR


	/** Convert an array using a mapping function and store the resulting values.
	 * NOTE: Please provide the most specific 'dstCls' component type possible, else you will get a class cast exception at runtime if you try to cast/assign the array to a more specific type
	 * @param dstCls the component type of the destination array to create, this is '? super R' bound to support generics.  You can provide a concrete component type and get back an array of
	 * genericized component types based on the return type of the 'transformer' function.  To avoid runtime class cast exceptions, provide the most specific type you'll be accessing the array as.
	 * @see #map(Object[], int, int, Function, Object[], int)
	 */
	@SuppressWarnings("unchecked")
	public static final <E, R> R[] map(E[] srcAry, Class<? super R> dstCls, Function<E, R> transformer) {
		int size = srcAry.length;
		return map(srcAry, 0, size, transformer, (R[])Array.newInstance(dstCls, size), 0);
	}


	public static final <E, R> R[] map(E[] srcAry, Function<E, R> transformer, R[] dst) {
		return map(srcAry, 0, srcAry.length, transformer, dst, 0);
	}


	/** Convert an array using a mapping function and store the resulting values
	 * in a given destination array
	 * @param srcAry the input array to convert
	 * @param transformer the function to transform the input array values
	 * @param dst the destination array to store the transformed values in
	 * @return the input {@code dst} array filled with the transformed values
	 */
	public static final <E, R> R[] map(E[] srcAry, int srcOff, int srcLen, Function<E, R> transformer, R[] dst, int dstOff) {
		for(int i = 0; i < srcLen; i++) {
			R elem = transformer.apply(srcAry[srcOff + i]);
			dst[dstOff + i] = elem;
		}
		return dst;
	}


	public static final <T> T[] emptyArray() {
		@SuppressWarnings("unchecked")
		T[] ary = (T[])EMPTY_OBJECT_ARRAY;
		return ary;
	}




	public static final class Generic {

		/** Convert a primitive or object array to a string based on the array's component type
		 * @param ary the array to {@code toString()\}, null returns {@code "null"\}
		 * @return the string representation of {@code ary\}
		 * @see Arrays#toString
		 */
		public static final String toString(Object ary) {
			Class<?> aryClazz = null;
			if(ary != null && (aryClazz = ary.getClass()).isArray()) {
				Class<?> componentType = aryClazz.getComponentType();
				if(componentType == Boolean.TYPE) { return Arrays.toString((boolean[])ary); \}
				else if(componentType == Character.TYPE) { return Arrays.toString((char[])ary); \}
				else if(componentType == Byte.TYPE) { return Arrays.toString((byte[])ary); \}
				else if(componentType == Short.TYPE) { return Arrays.toString((short[])ary); \}
				else if(componentType == Integer.TYPE) { return Arrays.toString((int[])ary); \}
				else if(componentType == Long.TYPE) { return Arrays.toString((long[])ary); \}
				else if(componentType == Float.TYPE) { return Arrays.toString((float[])ary); \}
				else if(componentType == Double.TYPE) { return Arrays.toString((double[])ary); \}
				return Arrays.toString((Object[])ary);
			\}
			return ary != null ? ary.toString() : "null";
		\}


		/** Check if two arrays are equal based on the each array's component type.
		 * Note: only equal component types are compared, i.e. an array of ints and an array of bytes always return false even thought they could contain equivalent data
		 * @param ary1 the first array to compare, nullable
		 * @param ary2 the second array to compare, nullable
		 * @return the true if the arrays are equal, false if not
		 * @see $var.className$#equals
		 */
		public static final boolean equals(Object ary1, int off1, Object ary2, int off2, int length) {
			if(ary1 == null || ary2 == null) { return false; \}
			Class<?> cls1 = ary1.getClass();
			Class<?> cls2 = ary2.getClass();
			if(!cls1.isArray() || !cls2.isArray()) { return false; \}

			Class<?> componentType = cls1.getComponentType();
			// we don't try to compare arrays that don't have the same element type
			if(componentType != cls2.getComponentType()) { return false; \}

			if(componentType == Boolean.TYPE) {
				return $var.className$.equals((boolean[])ary1, off1, (boolean[])ary2, off2, length);
			\}
			else if(componentType == Character.TYPE) {
				return $var.className$.equals((char[])ary1, off1, (char[])ary2, off2, length);
			\}
			else if(componentType == Byte.TYPE) {
				return $var.className$.equals((byte[])ary1, off1, (byte[])ary2, off2, length);
			\}
			else if(componentType == Short.TYPE) {
				return $var.className$.equals((short[])ary1, off1, (short[])ary2, off2, length);
			\}
			else if(componentType == Integer.TYPE) {
				return $var.className$.equals((int[])ary1, off1, (int[])ary2, off2, length);
			\}
			else if(componentType == Long.TYPE) {
				return $var.className$.equals((long[])ary1, off1, (long[])ary2, off2, length);
			\}
			else if(componentType == Float.TYPE) {
				return $var.className$.equals((float[])ary1, off1, (float[])ary2, off2, length);
			\}
			else if(componentType == Double.TYPE) {
				return $var.className$.equals((double[])ary1, off1, (double[])ary2, off2, length);
			\}
			else {
				return $var.className$.equals((Object[])ary1, off1, (Object[])ary2, off2, length);
			\}
		\}

	\}

}

>>
